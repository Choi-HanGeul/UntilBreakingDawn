using System.Collections;
using System.Collections.Generic;
using UnityEngine;
/*
public class PlayerController : MonoBehaviour
{
    //SerializeField ???????? ?????? ???? ????????

    [SerializeField]  //???? ??????
    private float walkSpeed;

    [SerializeField]  //?????? ??????
    private float runSpeed;

    [SerializeField]  //???? 
    private float crouchSpeed;
    
    public float applySpeed;  //?????? ???? ???????? ???? ???? (?????? ????)

    [SerializeField]   //????
    private float jumpPower;  //???? ??

    [SerializeField]   //????
    private float dashSpeed;
    public float dashTime;

    [SerializeField]   //??????
    private float lookSensitivity;    //?????? ??????

    // ?????? ????
    [SerializeField]
    private float cameraRotationLimit;         // ?????? ?????? ???? ???? (?????? ???????? ????)
    private float currentCameraRotationX;      // ???? ?????? ???? ???? (0)

    [SerializeField]   //???????? ?????? ?????? ???????? ????
    private float crouchPosY;        // ???? ??
    public float originPosY;        // ???? ??
    private float applyCrouchPosY;   // ???? ?????? ???? ?????? ???? (applySpeed?? ????)
    
    //???? ????
    private bool isGround = true;    // ?????? ???????? true?? ???? 
    private bool isRun = false;      // ?????? ????
    private bool isCrouch = false;   // ?? ???? ????
    private bool isDash = false;     // ???? ?????? ????
    private bool isDead = false;     // ????
    private bool isHungry = false;   // ????????

    // Rigidbody ????
    // Collider?? ???????? ????, Rigidbody?? Collider?? ???????? ??????
    // ???????? ???? ?????? ????
    private Rigidbody rigid;

    // CapsuleCollider ????????
    private CapsuleCollider capsuleCollider;
    
    [SerializeField]  //Camera ???????? ??????.. ?????????? ???? ????
    private Camera theCamera;

    private StatusController theStatusController;

    [SerializeField]  // ???? ????
    private GameObject gameOver;

    GameManager theGameManager;

    Animator anim;

    


    void Start()
    {
        //rigidbody ????????
        //Rigidbody ?????????? rigid?? ???????? ??
        rigid = GetComponent<Rigidbody>();

        capsuleCollider = GetComponent<CapsuleCollider>();
        theStatusController = GameObject.Find("Status").GetComponent<StatusController>();
        theGameManager = FindObjectOfType<GameManager>();
        anim = GetComponent<Animator>();

        applySpeed = walkSpeed;   //?????????? ???? ?????? ????
        originPosY = theCamera.transform.localPosition.y;  //?????? ???? ???? ????(???????? ??????)
        applyCrouchPosY = originPosY;  //?????????? ?????? originPosY
    }

    void Update()
    {
        IsGround();
        TryJump();
        TryRun();
        TryCrouch();
        TryDash();
        Move();
        CameraRotation();
        CharacterRotation();
        Dead();

        DecreaseSpeed();
    }

    private void DecreaseSpeed()
    {
        if(theStatusController.currentHungry <= 0)
        {
            theStatusController.spIncreaseSpeed = 0;
            theStatusController.currentSp = 0;
            walkSpeed = 2;
        }
        if (theStatusController.currentThirsty <= 0)
        {
            theStatusController.spIncreaseSpeed = 0;
            theStatusController.currentSp = 0;
            walkSpeed = 2;
        }

    }


    private void Dead()
    {
        if (theStatusController.currentHp <= 0)
        {
            Time.timeScale = 0f;

            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.Euler(-90.0f, 0, 0), Time.time * 0.01f); 

            theGameManager._goGameOverUI.SetActive(true);
        }
    }

    // ?????? ????????
    private void OnCollisionEnter(Collision collision)
    {
        if (collision.transform.CompareTag("Enemy"))
        {
            theStatusController.DecreaseHP(30);

           

            Vector3 pos = new Vector3(0, 0, -0.5f);
            transform.position = Vector3.Lerp(transform.position, pos, 0.03f);
        }
    }

    //private bool oneClick = false;
    //private double clickTimer = 0;
    //public float doubleClickSecond = 0.25f;
    //????
    private void TryDash()
    {
        if (Input.GetKeyDown(KeyCode.LeftControl))
        {
            StartCoroutine(Dash());
        }

        //if (oneClick && (Time.time - clickTimer) > doubleClickSecond)
        //{
        //    oneClick = false;
        //}

        //if (Input.GetKeyDown(KeyCode.W) && theStatusController.GetCurrentSP() > 0)
        //{
        //    if (!oneClick)
        //    {
        //        clickTimer = Time.time;
        //        oneClick = true;
                
        //    }
        //    else if (oneClick && ((Time.time - clickTimer) < doubleClickSecond))
        //    {
        //        oneClick = false;
        //        StartCoroutine(Dash());
        //    }
        //}
        //if (Input.GetKeyDown(KeyCode.A) && theStatusController.GetCurrentSP() > 0)
        //{
        //    if (!oneClick)
        //    {
        //        clickTimer = Time.time;
        //        oneClick = true;
        //    }
        //    else if (oneClick && ((Time.time - clickTimer) < doubleClickSecond))
        //    {
        //        oneClick = false;
        //        StartCoroutine(Dash());
        //    }
        //}
        //if (Input.GetKeyDown(KeyCode.S) && theStatusController.GetCurrentSP() > 0)
        //{
        //    if (!oneClick)
        //    {
        //        clickTimer = Time.time;
        //        oneClick = true;
        //    }
        //    else if (oneClick && ((Time.time - clickTimer) < doubleClickSecond))
        //    {
        //        oneClick = false;
        //        StartCoroutine(Dash());
        //    }
        //}
        //if (Input.GetKeyDown(KeyCode.D) && theStatusController.GetCurrentSP() > 0)
        //{
        //    if (!oneClick)
        //    {
        //        clickTimer = Time.time;
        //        oneClick = true;
        //    }
        //    else if (oneClick && ((Time.time - clickTimer) < doubleClickSecond))
        //    {
        //        oneClick = false;
        //        StartCoroutine(Dash());
        //    }
        //}
    }

    IEnumerator Dash()
    {
        isDash = true;

        applySpeed *= dashSpeed;

        theStatusController.DecreaseStamina(30);

        yield return new WaitForSeconds(dashTime);

        applySpeed = walkSpeed;

        isDash = false;
    }

    //???? ????
    private void TryCrouch()
    {
        if (Input.GetKeyDown(KeyCode.C))
        {
            Crouch();

        }
    }

    //???? ????
    private void Crouch()
    {
        isCrouch = !isCrouch;  //isCrouch?? true ?? false??, false ?? true?? ???????? ?????? ????

        if (isCrouch) //isCrouch?? true????
        {
            applySpeed = crouchSpeed;  //???????? ?????? ????
            applyCrouchPosY = crouchPosY;  //???????? ???? ????
            anim.SetBool("isCrouch", true);
        }
        else
        {
            applySpeed = walkSpeed;    //???? ??????
            applyCrouchPosY = originPosY; //???? ???? ????
            anim.SetBool("isCrouch", false);
        }

        //???????? ???? ?????? x, ???????? ?????? ?????? y, ???????? ???? ?????? z
        //theCamera.transform.localPosition = new Vector3(theCamera.transform.localPosition.x, applyCrouchPosY, theCamera.transform.localPosition.z);
        StartCoroutine(CrouchCoroutine()); //CrouchCoroutine ????
    }

    IEnumerator CrouchCoroutine()  //???? ?????? ???????? ???? ?????? ?????? ????
    {
        float _posY = theCamera.transform.localPosition.y;
        int count = 0;

        while(_posY != applyCrouchPosY)  //_posY?? ?????? ???? ???????? break
        {
            _posY = Mathf.Lerp(_posY, applyCrouchPosY, 0.3f);
            theCamera.transform.localPosition = new Vector3(0, _posY, 0);
            if (count > 15)  //15???? ?????????? ????
                break;
            yield return null;  //1?????? ???? ????
        }
        theCamera.transform.localPosition = new Vector3(0, applyCrouchPosY, 0f);

    }

    //???? ????
    private void IsGround()
    {
        //Physics - ??????
        //Raycast - ?????? ???? ?????? (???? ???????? ???????????? ??????)
        //transform?? ???????? ?????????? ?????? ???????? ?????? Vector3 ????
        //capsuleCollider.bounds.extents.y - capsuleCollider?? ?????? ?????? ???????? ???? ????
        //0.1f?? ???? ?????? ?????? ?????? ?????? ?????? ???? ??????
        isGround = Physics.Raycast(transform.position, Vector3.down, capsuleCollider.bounds.extents.y);
    }

    //????????

    //???? ????
    private void Jump()
    { 
        //?????????? ???????? ????
        if (isCrouch)
            Crouch();

        theStatusController.DecreaseStamina(50);
        //jumpPower ???? trasform.up ???????? ???? ??????
        rigid.velocity = transform.up * jumpPower;
    }

    //???? ????
    void TryRun()
    {
        //???? ?????? ?????? ???? ????
        if (Input.GetKey(KeyCode.LeftShift) && theStatusController.GetCurrentSP() > 0)
        {
            Running();
        }
        //???? ???????? ???? ???? ????
        if (Input.GetKeyUp(KeyCode.LeftShift) || theStatusController.GetCurrentSP() <= 0)
        {
            RunningCancel();
        }
    }
    void TryJump()
    {
        //spacebar ?????? ????
        //isGround ?? true ?????? ????
        if (Input.GetKeyDown(KeyCode.Space) && isGround && theStatusController.GetCurrentSP() > 0)
        {
            Jump();
        }
    }

    //??????
    void Running()
    {
        if (isCrouch)
            Crouch();


        //true ?? ?????????? applySpeed ?? ???? walkSpeed ?? runSpeed ?? ????
        isRun = true;
        theStatusController.DecreaseStamina(1);
        applySpeed = runSpeed;
    }

    //?????? ????
    void RunningCancel()
    {
        //isRun?? false?? ???? applySpeed?? walkSpeed ?? ????
        isRun = false;
        applySpeed = walkSpeed;
    }

    //??????
    private void Move()
    {
        float moveDirX = Input.GetAxisRaw("Horizontal");  //???? ?????? ??????
        float moveDirZ = Input.GetAxisRaw("Vertical");    //???? ?????? ??????

        Vector3 moveHorizontal = transform.right * moveDirX;  //?????? ???????? ???????? ????????
        Vector3 moveVertical = transform.forward * moveDirZ;  //?????????? ????????

        Vector3 velocity = (moveHorizontal + moveVertical).normalized * applySpeed;

        //rigid ?? MovePosition ???????? ???????? transform position (???? ????)???? velocity ???? ????
        rigid.MovePosition(transform.position + velocity * Time.deltaTime);

        anim.SetBool("isWalk", velocity != Vector3.zero);
    }

    private void CharacterRotation()  //???? ?????? ????
    {
        float _yRotation = Input.GetAxisRaw("Mouse X");
        Vector3 _characterRotationY = new Vector3(0f, _yRotation, 0f) * lookSensitivity;

        //_characterRotationY ???? Quaternion ?? ?????? rotation ???? ?????? ?????? ???????? ????
        rigid.MoveRotation(rigid.rotation * Quaternion.Euler(_characterRotationY));
    }

    private void CameraRotation()  //???? ?????? ????
    {
        float _xRotation = Input.GetAxisRaw("Mouse Y");
        float _cameraRotationX = _xRotation * lookSensitivity;  //?????? ?????? ???? ?????? ????????.
        currentCameraRotationX -= _cameraRotationX;

        //Clamp?? ???????? currentCameraRotationX ??  cameraRotationLimit ???? ???????? ??????
        currentCameraRotationX = Mathf.Clamp(currentCameraRotationX, -cameraRotationLimit, cameraRotationLimit);

        theCamera.transform.localEulerAngles = new Vector3(currentCameraRotationX, 0f, 0f);

    }

}*/